async function checkPassword() {
    const password = document.getElementById('password').value;
    if (!password) {
        showResult('error', 'Пожалуйста, введите пароль для проверки');
        return;
    }
    try {
        const hash = await sha1(password);
        const prefix = hash.substring(0, 5);
        const suffix = hash.substring(5).toUpperCase();
        const response = await fetch(`https://api.pwnedpasswords.com/range/${prefix}`, {
            headers: {
                'User-Agent': 'Password-Checker'
            }
        }); //все хэши
        const text = await response.text();
        const hashes = text.split('\r\n');
        
        let found;
        for (const currentHash of hashes) { //ищем необходимы
            const index = currentHash.indexOf(':');
            const hashsuff = currentHash.substring(0, index);
            if (hashsuff === suffix) {
                found = currentHash;
                break;
            }
        }
        if (found) {
            const count = parseInt(found.split(':')[1]); //хэш:число
            showResult('breached', 
                `⚠️ Этот пароль был найден в ${count} утечках данных.<br><br>
                <strong>Рекомендации:</strong>
                <ul>
                    <li>Немедленно измените этот пароль везде, где он используется</li>
                    <li>Используйте уникальные пароли для каждого сервиса</li>
                    <li>Рассмотрите возможность использования менеджера паролей</li>
                </ul>`);
        } 
        else {
            showResult('safe', `
                ✅ Этот пароль не найден в известных утечках данных.<br><br>
                <strong>Рекомендации:</strong>
                <ul>
                    <li>Убедитесь, что вы используете разные пароли для разных сервисов</li>
                    <li>Используйте длинные и сложные пароли</li>
                    <li>Рассмотрите возможность использования менеджера паролей</li>
                </ul>`);
        }
    } 
    catch (error) {
        showResult('error', 
            `⚠️ Произошла ошибка при проверке пароля: ${error.message}<br>
            Пожалуйста, попробуйте позже.`);
    }
}
function showResult(className, message) {
    const element = document.getElementById('passwordResult');
    element.className = `result ${className}`;
    element.innerHTML = message;
    element.style.display = 'block';
}
async function sha1(password) {
    const encoder = new TextEncoder();//кодируем пароль в бинарный формат
    const msgBuffer = encoder.encode(password);
    const hashBuffer = await crypto.subtle.digest('SHA-1', msgBuffer); //cоздаём хеш SHA-1
    const byteArray = new Uint8Array(hashBuffer); //преобразуем ArrayBuffer в обычный массив чисел
    const hashArray = Array.from(byteArray);
    let hashHex = ''; //преобразуем массив байт в hex-строку
    for (const byte of hashArray) {
        let hexByte = byte.toString(16);
        if (hexByte.length === 1) {
            hexByte = '0' + hexByte;
        }
        hashHex += hexByte;
    }
    return hashHex;
}
